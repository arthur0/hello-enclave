#include <stdio.h>
#include <iostream>
#include "Enclave_u.h" /* Generated by edger8r */
#include "sgx_urts.h"  /* From SGX SDK */
#include "sgx_utils/sgx_utils.h"

/* Global EID shared by multiple threads */
sgx_enclave_id_t global_eid = 0;

// OCall implementations
void ocall_print(const char *str)
{
    printf("[App.cpp] <ocall_print> \n%s\n", str);
}

int main(int argc, char const *argv[])
{
    if (initialize_enclave(&global_eid, "enclave.token", "enclave.signed.so") < 0)
    {
        std::cout << "Fail to initialize enclave." << std::endl;
        return 1;
    }
    int ptr;
    sgx_status_t status = ecall_generate_random_number(global_eid, &ptr);

    if (!is_status_successful(status, "ECALL 'generate_random_number Failed' :(", status))
    {
        return 1;
    }
    std::cout << "[Enclave_u.c] ecall_generate_random_number successfully called" << std::endl;
    printf("[App.cpp] out random number: %d\n", ptr);

    // Seal the random number
    size_t sealed_size = sizeof(sgx_sealed_data_t) + sizeof(ptr);
    uint8_t *sealed_data = (uint8_t *)malloc(sealed_size);

    sgx_status_t ecall_status;
    status = seal(global_eid, &ecall_status,
                  (uint8_t *)&ptr, sizeof(ptr),
                  (sgx_sealed_data_t *)sealed_data, sealed_size);

    if (!is_status_successful(status, "Sealing failed :(", ecall_status))
    {
        return 1;
    }
    std::cout << "[Enclave_u.c] seal successfuly called" << std::endl;

    int unsealed;
    status = unseal(global_eid, &ecall_status,
                    (sgx_sealed_data_t *)sealed_data, sealed_size,
                    (uint8_t *)&unsealed, sizeof(unsealed));

    if (!is_status_successful(status, "Unsealing failed :(", ecall_status))
    {
        return 1;
    }
    std::cout << "[Enclave_u.c] unseal successfully called " << std::endl;
    printf("[App.cpp] Seal round trip success! Receive back: %d\n", unsealed);
    return 0;
}
